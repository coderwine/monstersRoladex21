{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","m","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAWH,MCSJI,G,MAbF,SAAAC,GAGT,OACI,sBAAKJ,UAAU,iBAAf,UACA,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAClB,mCAAMJ,EAAMG,QAAQE,KAApB,OACA,kCAAKL,EAAMG,QAAQG,MAAnB,YCPCC,G,MAAW,SAACP,GACvB,OACE,qBAAKJ,UAAU,YAAf,SACGI,EAAMQ,SAASC,KAAI,SAAAC,GAAC,OACnB,cAAC,EAAD,CAAiBP,QAASO,GAAfA,EAAEN,WCiDNO,E,kDAlDb,aAAe,IAAD,8BACZ,gBAgBFhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXT,SAAU,GACVM,YAAa,IALH,E,gEAWO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEL,SAAUc,S,+BAQrC,IAAD,EAC2BC,KAAKN,MAA/BT,EADD,EACCA,SAAUM,EADX,EACWA,YACZU,EAAmBhB,EAASiB,QAAO,SAAAf,GAAC,OAAIA,EAAEL,KAAKqB,cAAcC,SAASb,EAAYY,kBAKxF,OACE,sBAAK9B,UAAU,MAAf,UAKE,oDACA,cAAC,EAAD,CACEF,YAAa,iBAEbC,aAAc4B,KAAK5B,eAKrB,cAAC,EAAD,CAAUa,SAAWgB,W,GA7CXI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.23fbe759.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={ handleChange } />\r\n);","import React from 'react';\r\n// import './card.styles.css';\r\nimport './card.styles.css'\r\n\r\nconst Card = props => {\r\n    // console.log('CARD', props)\r\n\r\n    return(\r\n        <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n            <h2> {props.monster.name} </h2>\r\n            <p> {props.monster.email} </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n// NOTES:\r\n/*\r\n - Images: https://robohash.org/1?set=set2\r\n\r\n*/","import React from \"react\";\r\nimport Card from '../card/card.component';\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map(m => (\r\n        <Card key={m.id} monster={m} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { SearchBox } from \"./components/search-box/search-box.component\"\nimport { CardList } from \"./components/card-list/card-list.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n\n    //this.handleChange = this.handleChange.bind(this) //Needed if we don't use arrow functions\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n    //the keyword of \"this\" is now bound to the Component when we use the arrow function THANKS ES6\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase()))\n    // filteredMonsters is allowing us to search the state of \"monsters\", filter through them by name (making each letter in the name lowercase to save from being case sensitive - and creating a new array), including a paramter of what information is within the current state of \"searchField\" (which is also being set to lowercase so that it can actually match).  Once these two things are equal, it is being used below within the CardList to then generate our monsters.\n\n    // This is all housed within the render() method due to the onChange() that calls for the component to be re-rendered.\n\n    return (\n      <div className=\"App\">\n        { \n          // <input type=\"search\" placeholder=\"search monster\" onChange={e => this.setState({ searchField: e.target.value })} />\n          // This was the original input field that we converted into a reusable component (SearchBox)\n        }\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder ='search monster'\n         // handleChange={e => this.setState({ searchField: e.target.value })} \n          handleChange={this.handleChange} \n        />\n        {\n          // <CardList monsters={ this.state.monsters} /> \n          } \n        <CardList monsters={ filteredMonsters } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\nNOTES:\n\n- Usernames: https://jsonplaceholder.typicode.com/users\n\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';  //importing our App component.\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')  //looking for an element within the DOM with the ID of root and replacing it with what we are passing within App.js.  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}